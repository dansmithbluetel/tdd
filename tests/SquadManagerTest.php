<?php declare(strict_types=1);

use PHPUnit\Framework\TestCase;

/**
 * @coversDefaultClass SquadManager
 */
class SquadManagerTest extends TestCase
{
    /**
     * @covers ::moveMember
     * @covers Squad::__construct
     * @covers Squad::addMember
     * @covers Squad::format
     * @covers Squad::getMembers
     * @covers Squad::removeMember
     * @covers Squad::sort
     */
    public function testMoveMember()
    {
        $blueSquad = new Squad(['danny', 'dan', 'simon', 'lewis']);
        $redSquad = new Squad(['Bakang', 'Bal', 'Bronwen', 'JB']);

        $eventDispatcher = Mockery::mock(EventDispatcher::class)
            ->shouldReceive('dispatch')
            ->with('squad.member_moved', [
                    'member' => 'simon',
                    'from' => $blueSquad,
                    'to' => $redSquad,
                ])
            ->getMock();
        //$eventDispatcher = new EventDispatcher;
        $squadManager = new SquadManager($eventDispatcher);


        $squadManager->moveMember('simon', $blueSquad, $redSquad);

        $this->assertCount(3, $blueSquad->getMembers());
        $this->assertContains('Simon', $redSquad->getMembers());
        $this->assertNotContains('Simon', $blueSquad->getMembers());
    }

    /**
     * @covers ::moveMember
     * @covers Squad::__construct
     * @covers Squad::addMember
     * @covers Squad::format
     * @covers Squad::getMembers
     * @covers Squad::removeMember
     * @covers Squad::sort
     * @Ex
     */
    public function testMoveNonExistentMember()
    {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessage('Member is not in squad');
        $blueSquad = new Squad(['danny', 'dan', 'simon', 'lewis']);
        $redSquad = new Squad(['Bakang', 'Bal', 'Bronwen', 'JB']);

        $eventDispatcher = new EventDispatcher;
        $squadManager = new SquadManager($eventDispatcher);

        $squadManager->moveMember('jan', $blueSquad, $redSquad);

        $this->assertCount(3, $blueSquad->getMembers());
        $this->assertContains('Simon', $redSquad->getMembers());
        $this->assertNotContains('Simon', $blueSquad->getMembers());
    }

    /**
     * @covers ::swapMember
     * @covers Squad::__construct
     * @covers Squad::addMember
     * @covers Squad::format
     * @covers Squad::getMembers
     * @covers Squad::removeMember
     * @covers Squad::sort
     */
    public function testSwapMember()
    {
        $blueSquad = new Squad(['danny', 'dan', 'simon', 'lewis']);
        $redSquad = new Squad(['Bakang', 'Bal', 'Bronwen', 'JB']);

        $eventDispatcher = Mockery::mock(EventDispatcher::class)
            ->shouldReceive('dispatch')
            ->with('squad.member_moved', [
                'member' => 'simon',
                'from' => $blueSquad,
                'to' => $redSquad,
            ])
            ->once()
            //->andReturnNull()
            ->shouldReceive('dispatch')
            ->with('squad.member_moved', [
                'member' => 'bal',
                'from' => $redSquad,
                'to' => $blueSquad,
            ])
            ->once()
            ->getMock();

        //$eventDispatcher = new EventDispatcher;
        $squadManager = new SquadManager($eventDispatcher);

        $squadManager->swapMember('simon', $blueSquad,'bal', $redSquad);

        $this->assertCount(4, $blueSquad->getMembers());
        $this->assertContains('Simon', $redSquad->getMembers());
        $this->assertNotContains('Simon', $blueSquad->getMembers());

        $this->assertContains('Bal', $blueSquad->getMembers());
        $this->assertNotContains('Bal', $redSquad->getMembers());
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
